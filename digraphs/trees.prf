(trees
 (tree?_TCC1 0
  (tree?_TCC1-1 nil 3300198183
   ("" (skosimp*)
    (("" (expand "size")
      (("" (assert)
        (("" (expand "del_vert")
          (("" (rewrite "card_remove") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" digraph_def nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (T formal-type-decl nil trees nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (card_remove formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (tree_nonempty 0
  (tree_nonempty-4 "" 3300809694
   ("" (skosimp*)
    (("" (expand "empty?")
      (("" (use "card_empty?[T]")
        (("" (iff)
          (("" (assert)
            (("" (expand "tree?")
              (("" (skosimp*)
                (("" (expand "root?")
                  (("" (lemma "deg_1_sing")
                    (("" (inst?)
                      (("" (inst - "v!1")
                        (("" (assert)
                          (("" (expand "in?")
                            (("" (expand "empty?")
                              ((""
                                (inst?)
                                ((""
                                  (expand "member")
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" digraphs_ nil)
    (tree? def-decl "bool" trees nil)
    (deg_1_sing formula-decl nil digraph_deg nil)
    (in? const-decl "bool" pairs "structures/")
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (card_empty? formula-decl nil finite_sets nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (T formal-type-decl nil trees nil))
   shostak)
  (tree_nonempty-3 "" 3300462180
   ("" (skosimp*)
    (("" (expand "empty?")
      (("" (use "card_empty?[T]")
        (("" (iff)
          (("" (assert)
            (("" (expand "tree?")
              (("" (split)
                (("1" (flatten)
                  (("1" (use "nonempty_singleton[T]")
                    (("1" (assert)
                      (("1" (expand "nonempty?")
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (expand "tree?")
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (use "nonempty_singleton[T]")
                          (("1" (assert)
                            (("1" (expand "nonempty?")
                              (("1"
                                (expand "del_vert")
                                (("1"
                                  (expand "remove")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (use "nonempty_singleton[T]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nonempty?")
                                          (("1"
                                            (expand "empty?")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "empty?")
                        (("2" (skosimp*)
                          (("2" (inst?)
                            (("2" (expand "member")
                              (("2" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deg_1_sing formula-decl nil digraph_deg nil)
    (in? const-decl "bool" pairs "structures/"))
   shostak)
  (tree_nonempty-2 "" 3300130046
   ("" (induct "G" 1 "tree?_induction[T]")
    (("" (skosimp*)
      (("" (split)
        (("1" (flatten)
          (("1" (assert)
            (("1" (expand "empty?")
              (("1" (expand "singleton?")
                (("1" (skosimp* t)
                  (("1" (expand "empty?")
                    (("1" (expand "member")
                      (("1" (inst?) (("1" (inst?) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (assert)
            (("2" (expand "empty?")
              (("2" (expand "empty?")
                (("2" (expand "member")
                  (("2" (skosimp*)
                    (("2" (inst - "x!1")
                      (("2" (expand "del_vert")
                        (("2" (expand "remove")
                          (("2" (expand "member")
                            (("2" (flatten) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in? const-decl "bool" pairs "structures/")
    (deg_1_sing formula-decl nil digraph_deg nil))
   shostak)
  (tree_nonempty-1 nil 3300116030
   ("" (skosimp*)
    (("" (expand "empty?")
      (("" (use "card_empty?[T]")
        (("" (iff)
          (("" (assert)
            (("" (expand "tree?")
              (("" (skosimp*)
                (("" (lemma "deg_1_sing")
                  (("" (inst?)
                    (("" (inst - "v!1")
                      (("" (assert)
                        (("" (expand "in?")
                          (("" (expand "empty?")
                            (("" (inst?)
                              ((""
                                (expand "member")
                                (("" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((del_vert const-decl "digraph[T]" digraph_ops nil)) nil))
 (tree_size_pos 0
  (tree_size_pos-1 nil 3805637204
   ("" (skeep)
    (("" (lemma tree_nonempty)
      (("" (expand size)
        (("" (expand empty?)
          (("" (inst -1 G)
            (("" (assert)
              (("" (expand empty?)
                (("" (skeep)
                  (("" (lemma "nonempty_card[T]")
                    (("" (inst?)
                      (("" (expand member)
                        (("" (assert)
                          (("" (expand nonempty?)
                            (("" (expand empty?)
                              ((""
                                (inst -1 x)
                                ((""
                                  (expand member)
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tree_nonempty formula-decl nil trees nil)
    (empty? const-decl "bool" digraphs_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil trees nil)
    (size const-decl "nat" digraph_def nil))
   shostak))
 (tree_no_self_loops 0
  (tree_no_self_loops-1 nil 3805636770
   ("" (skeep)
    (("" (name n "size(G)")
      (("" (generalize G G)
        (("" (generalize n n)
          (("" (induct n)
            (("1" (skeep)
              (("1" (lemma tree_size_pos)
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (skeep)
              (("2" (skeep)
                (("2" (expand tree? -3)
                  (("2" (split -3)
                    (("1" (expand no_self_loops?)
                      (("1" (skeep)
                        (("1" (case "emptyset[edgetype](e)")
                          (("1" (expand emptyset)
                            (("1" (propax) nil nil)) nil)
                           ("2" (lemma card_is_0[edgetype])
                            (("2" (inst?)
                              (("2"
                                (iff)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst -3 "del_vert(G!1,v)")
                        (("2" (assert)
                          (("2" (split -3)
                            (("1" (expand no_self_loops?)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 e)
                                  (("1" (flatten) nil nil)
                                   ("2"
                                    (expand del_vert)
                                    (("2"
                                      (expand in?)
                                      (("2"
                                        (expand leaf?)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand in_deg)
                                            (("2"
                                              (expand out_deg)
                                              (("2"
                                                (expand incoming_edges)
                                                (("2"
                                                  (expand
                                                   outgoing_edges)
                                                  (("2"
                                                    (replace -6 -1 RL)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case "v=e`1")
                                                        (("1"
                                                          (delete -2)
                                                          (("1"
                                                            (delete -2)
                                                            (("1"
                                                              (lemma
                                                               card_is_0[edgetype])
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "emptyset[edgetype](e)")
                                                                    (("1"
                                                                      (expand
                                                                       emptyset)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       RL)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   finite_subset[edgetype])
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "edges(G!1)"
                                                                     _)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           subset?)
                                                                          (("2"
                                                                            (expand
                                                                             member)
                                                                            (("2"
                                                                              (skeep)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand size)
                              (("2"
                                (expand del_vert 1)
                                (("2"
                                  (lemma card_remove[T])
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" digraph_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil trees nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (in? const-decl "bool" pairs "structures/")
    (out_deg const-decl "nat" digraph_deg nil)
    (outgoing_edges const-decl "finite_set[edgetype[T]]" digraph_deg
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (incoming_edges const-decl "finite_set[edgetype[T]]" digraph_deg
     nil)
    (in_deg const-decl "nat" digraph_deg nil)
    (leaf? const-decl "bool" trees nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (card_is_0 formula-decl nil finite_sets nil)
    (tree_size_pos formula-decl nil trees nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (tree? def-decl "bool" trees nil)
    (no_self_loops? const-decl "bool" trees nil))
   shostak))
 (root_unique 0
  (root_unique-2 nil 3805636756
   ("" (skeep)
    (("" (name n "size(G)")
      (("" (generalize G G)
        (("" (generalize n n)
          (("" (induct n)
            (("1" (skeep)
              (("1" (lemma tree_size_pos)
                (("1" (inst -1 "G!1") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (skeep)
                (("2" (copy -3)
                  (("2" (hide -1)
                    (("2" (expand tree? -3)
                      (("2" (split -3)
                        (("1" (flatten)
                          (("1" (delete -3)
                            (("1" (delete -3)
                              (("1"
                                (lemma card_is_0[edgetype])
                                (("1"
                                  (lemma card_one[T])
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (iff)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (delete -3 -4)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand exists1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (inst 1 x)
                                                    (("1"
                                                      (expand root?)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           singleton)
                                                          (("1"
                                                            (expand
                                                             in_deg)
                                                            (("1"
                                                              (expand
                                                               incoming_edges)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   emptyset)
                                                                  (("1"
                                                                    (lemma
                                                                     card_is_0[edgetype])
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (iff)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         is_finite
                                                                         1)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           0
                                                                           "LAMBDA (x:{e: edgetype[T] | FALSE}) : 0")
                                                                          (("1"
                                                                            (expand
                                                                             injective?)
                                                                            (("1"
                                                                              (skeep)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand unique?)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand root?)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (replace
                                                             -5)
                                                            (("2"
                                                              (expand
                                                               singleton)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst -3 "del_vert[T](G!1,v)")
                            (("2" (assert)
                              (("2"
                                (case "size(del_vert[T](G!1, v)) = j")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand exists1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "j=1")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (delete -1)
                                              (("1"
                                                (simplify)
                                                (("1"
                                                  (expand size)
                                                  (("1"
                                                    (case
                                                     "singleton?(vert(del_vert[T](G!1,v)))")
                                                    (("1"
                                                      (case
                                                       "FORALL (x:T) : vert(G!1)(x) IMPLIES (x=v OR x=singleton_elt(vert(del_vert(G!1,v))))")
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "singleton_elt(vert(del_vert(G!1, v)))")
                                                          (("1"
                                                            (expand
                                                             root?
                                                             1)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (expand
                                                                 in_deg)
                                                                (("1"
                                                                  (lemma
                                                                   card_is_0[edgetype])
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (iff)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (delete
                                                                             2)
                                                                            (("1"
                                                                              (apply-extensionality
                                                                               1)
                                                                              (("1"
                                                                                (delete
                                                                                 2)
                                                                                (("1"
                                                                                  (iff)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         incoming_edges)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               -4)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "tree_no_self_loops")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       no_self_loops?)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "(x!1, singleton_elt(vert(del_vert(G!1, v))))")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -4
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "G!1")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "(x!1, singleton_elt(vert(del_vert(G!1, v))))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -6)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           leaf?)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               out_deg)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 card_is_0[edgetype])
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (iff)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "emptyset((x!1, singleton_elt(vert(del_vert(G!1, v)))))")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           emptyset)
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (replace
                                                                                                                                           -1
                                                                                                                                           1
                                                                                                                                           RL)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             outgoing_edges)
                                                                                                                                            (("2"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         emptyset)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 singleton_singleton[T])
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (rewrite
                                                                           singleton_rew)
                                                                          (("2"
                                                                            (expand
                                                                             del_vert
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               singleton
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 remove
                                                                                 -1)
                                                                                (("2"
                                                                                  (case
                                                                                   "{y: T | v /= y AND member(y, vert(G!1))}(x!1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       member)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           unique?)
                                                          (("2"
                                                            (expand
                                                             root?
                                                             1)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst-cp
                                                                 -5
                                                                 "x!1")
                                                                (("2"
                                                                  (inst-cp
                                                                   -5
                                                                   "y")
                                                                  (("2"
                                                                    (delete
                                                                     -5)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         root?
                                                                         -11)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             leaf?)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 -5)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4
                                                                                     -9)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (split
                                                                                   -6)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3
                                                                                       -9)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (case
                                                           "x!1 = v OR remove(v,vert(G!1))(x!1)")
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               del_vert
                                                               2)
                                                              (("2"
                                                                (lemma
                                                                 singleton_elt_lem[T])
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (expand
                                                                     del_vert
                                                                     -4)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               remove
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   member)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skeep)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       singleton?)
                                                      (("2"
                                                        (lemma
                                                         card_one[T])
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "x!1")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (typepred
                                                                     y)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         singleton)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           RL)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     singleton)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "root?(G!1)(x)")
                                            (("1"
                                              (split 2)
                                              (("1" (inst 1 x) nil nil)
                                               ("2"
                                                (expand unique? 1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand root?)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (reveal -2)
                                                        (("2"
                                                          (delete
                                                           -6
                                                           -7
                                                           -8
                                                           -9
                                                           -10
                                                           -11
                                                           -12
                                                           -13
                                                           -14
                                                           2)
                                                          (("2"
                                                            (name
                                                             m
                                                             "size(G!1)")
                                                            (("2"
                                                              (generalize
                                                               "x!1"
                                                               x)
                                                              (("2"
                                                                (generalize
                                                                 y
                                                                 y)
                                                                (("2"
                                                                  (generalize
                                                                   "G!1"
                                                                   G)
                                                                  (("2"
                                                                    (generalize
                                                                     m
                                                                     m)
                                                                    (("2"
                                                                      (induct
                                                                       m)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (lemma
                                                                           tree_size_pos)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             tree?
                                                                             -3)
                                                                            (("2"
                                                                              (split
                                                                               -3)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   card_one[T])
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             singleton)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -7)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "del_vert(G!2,v!1)"
                                                                                   "y!1"
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "v!1 /= x!2 AND v!1 /= y!1")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           size
                                                                                           3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             del_vert
                                                                                             3
                                                                                             (1))
                                                                                            (("1"
                                                                                              (lemma
                                                                                               card_remove[T])
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       size
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (delete
                                                                                                             -1
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               in_deg)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 card_subset[edgetype])
                                                                                                                (("1"
                                                                                                                  (inst-cp
                                                                                                                   -1
                                                                                                                   "incoming_edges(x!2, del_vert(G!2, v!1))"
                                                                                                                   "incoming_edges(x!2,G!2)")
                                                                                                                  (("1"
                                                                                                                    (inst-cp
                                                                                                                     -1
                                                                                                                     "incoming_edges(y!1, del_vert(G!2, v!1))"
                                                                                                                     "incoming_edges(y!1,G!2)")
                                                                                                                    (("1"
                                                                                                                      (delete
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (delete
                                                                                                                                 -1
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   del_vert
                                                                                                                                   3)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     remove
                                                                                                                                     3)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       member
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               subset?)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 member)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   incoming_edges)
                                                                                                                                  (("2"
                                                                                                                                    (skeep)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         del_vert
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             subset?)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               member)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 incoming_edges)
                                                                                                                                (("2"
                                                                                                                                  (skeep)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       del_vert
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         leaf?)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete 3)
                                              (("2"
                                                (expand root? 1)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (expand root? -4)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand in_deg)
                                                        (("1"
                                                          (lemma
                                                           card_is_0[edgetype])
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (iff)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (delete
                                                                   2)
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     1)
                                                                    (("1"
                                                                      (delete
                                                                       2)
                                                                      (("1"
                                                                        (lemma
                                                                         card_is_0[edgetype])
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (iff)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (delete
                                                                                 -5)
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (delete
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         incoming_edges
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             -1)
                                                                                            (("1"
                                                                                              (case
                                                                                               "emptyset(x!1,x)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 emptyset)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -3
                                                                                                 1
                                                                                                 RL)
                                                                                                (("2"
                                                                                                  (delete
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     incoming_edges
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       del_vert
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           in?)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             leaf?
                                                                                                             -5)
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 in_deg)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   out_deg)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     card_one[edgetype])
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       card_is_0[edgetype])
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (iff)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (skeep)
                                                                                                                                (("2"
                                                                                                                                  (delete
                                                                                                                                   -7
                                                                                                                                   -8)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -3)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         outgoing_edges)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "emptyset(x!1,x)")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             emptyset)
                                                                                                                                            (("1"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (replace
                                                                                                                                             -2
                                                                                                                                             1
                                                                                                                                             RL)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         outgoing_edges)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           incoming_edges)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             del_vert
                                                                                                                                             -8)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               remove
                                                                                                                                               -8)
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand root? -4)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (case
                                                         "subset?(vert(del_vert(G!1,v)),vert(G!1))")
                                                        (("1"
                                                          (expand
                                                           subset?)
                                                          (("1"
                                                            (inst -1 x)
                                                            (("1"
                                                              (expand
                                                               member)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           subset?)
                                                          (("2"
                                                            (expand
                                                             member)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 del_vert
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   remove
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       member)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand del_vert)
                                  (("2"
                                    (expand size)
                                    (("2"
                                      (lemma card_remove[T])
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" digraph_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil trees nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (singleton_elt const-decl "T" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (no_self_loops? const-decl "bool" trees nil)
    (leaf? const-decl "bool" trees nil)
    (out_deg const-decl "nat" digraph_deg nil)
    (outgoing_edges const-decl "finite_set[edgetype[T]]" digraph_deg
     nil)
    (tree_no_self_loops formula-decl nil trees nil)
    (singleton_rew formula-decl nil sets nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (remove const-decl "set" sets nil)
    (singleton_singleton formula-decl nil sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (singleton_elt_lem formula-decl nil sets nil)
    (singleton? const-decl "bool" sets nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (in? const-decl "bool" pairs "structures/")
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subset? const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card_subset formula-decl nil finite_sets nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (card_one formula-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (incoming_edges const-decl "finite_set[edgetype[T]]" digraph_deg
     nil)
    (emptyset const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (in_deg const-decl "nat" digraph_deg nil)
    (unique? const-decl "bool" exists1 nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (card_is_0 formula-decl nil finite_sets nil)
    (tree_size_pos formula-decl nil trees nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (tree? def-decl "bool" trees nil)
    (pred type-eq-decl nil defined_types nil)
    (exists1 const-decl "bool" exists1 nil)
    (root? const-decl "bool" trees nil))
   nil)
  (root_unique-1 nil 3805636744 ("" (postpone) nil nil) nil shostak))
 (root_TCC1 0
  (root_TCC1-1 nil 3805646664
   ("" (skeep)
    (("" (typepred G)
      (("" (lemma root_unique)
        (("" (inst -1 G)
          (("" (assert)
            (("" (expand singleton?)
              (("" (expand exists1)
                (("" (flatten)
                  (("" (skeep)
                    (("" (inst 1 x)
                      (("" (expand unique?)
                        (("" (skeep)
                          (("" (inst -2 x y) (("" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tree type-eq-decl nil trees nil) (tree? def-decl "bool" trees nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil trees nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (singleton? const-decl "bool" sets nil)
    (root? const-decl "bool" trees nil)
    (unique? const-decl "bool" exists1 nil)
    (exists1 const-decl "bool" exists1 nil)
    (root_unique formula-decl nil trees nil))
   nil))
 (tree_in_deg_max 0
  (tree_in_deg_max-2 nil 3805649349
   ("" (skeep)
    (("" (name n "size(G)")
      (("" (generalize v v)
        (("" (generalize G G)
          (("" (generalize n n)
            (("" (induct n)
              (("1" (skeep)
                (("1" (lemma tree_size_pos)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (skeep)
                (("2" (skeep)
                  (("2" (copy -3)
                    (("2" (hide -1)
                      (("2" (expand tree? -3)
                        (("2" (split -3)
                          (("1" (flatten)
                            (("1" (expand in_deg)
                              (("1"
                                (expand incoming_edges)
                                (("1"
                                  (lemma card_subset[edgetype])
                                  (("1"
                                    (inst
                                     -1
                                     "{e: edgetype[T] | edges(G!1)(e) AND e`2 = v!1}"
                                     "edges(G!1)")
                                    (("1"
                                      (split)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (expand subset?)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand member)
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma finite_subset[edgetype])
                                      (("2"
                                        (inst -1 "edges(G!1)" _)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (expand subset?)
                                              (("2"
                                                (expand member)
                                                (("2" (skeep) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst -3 "del_vert(G!1,v!2)" "v!1")
                              (("2"
                                (split)
                                (("1"
                                  (expand in_deg)
                                  (("1"
                                    (expand incoming_edges)
                                    (("1"
                                      (expand del_vert)
                                      (("1"
                                        (lemma card_subset[edgetype])
                                        (("1"
                                          (inst
                                           -1
                                           "{e: edgetype[T] | edges(G!1)(e) AND e`2 = v!1}"
                                           "{e: edgetype[T] |
                      (edges(G!1)(e) AND NOT in?(v!2, e)) AND e`2 = v!1}")
                                          (("1"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand subset?)
                                              (("2"
                                                (expand member)
                                                (("2"
                                                  (expand in?)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -3)
                                                        (("1"
                                                          (expand
                                                           leaf?)
                                                          (("1"
                                                            (expand
                                                             out_deg)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 outgoing_edges)
                                                                (("1"
                                                                  (lemma
                                                                   card_is_0[edgetype])
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (iff)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "emptyset[edgetype](x)")
                                                                          (("1"
                                                                            (expand
                                                                             emptyset)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             RL)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       finite_subset[edgetype])
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "edges(G!1)"
                                                                         _)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               subset?)
                                                                              (("2"
                                                                                (expand
                                                                                 member)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -3
                                                           -1)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (delete
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 leaf?)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     out_deg)
                                                                    (("2"
                                                                      (expand
                                                                       outgoing_edges)
                                                                      (("2"
                                                                        (expand
                                                                         in_deg
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           incoming_edges
                                                                           -4)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             finite_subset[edgetype])
                                            (("2"
                                              (inst -1 "edges(G!1)" _)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand subset?)
                                                    (("2"
                                                      (expand member)
                                                      (("2"
                                                        (skeep)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             finite_subset[edgetype])
                                            (("3"
                                              (inst -1 "edges(G!1)" _)
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand subset?)
                                                    (("3"
                                                      (expand member)
                                                      (("3"
                                                        (skeep)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand size)
                                  (("2"
                                    (expand del_vert)
                                    (("2"
                                      (lemma card_remove[T])
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (expand leaf?)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma in_deg_pos)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_deg const-decl "nat" digraph_deg nil)
    (<= const-decl "bool" reals nil) (tree? def-decl "bool" trees nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (out_deg const-decl "nat" digraph_deg nil)
    (outgoing_edges const-decl "finite_set[edgetype[T]]" digraph_deg
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (emptyset const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (card_is_0 formula-decl nil finite_sets nil)
    (leaf? const-decl "bool" trees nil)
    (v!2 skolem-const-decl "(vert(G!1))" trees nil)
    (in? const-decl "bool" pairs "structures/")
    (pair type-eq-decl nil pairs "structures/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (in_deg_pos formula-decl nil digraph_deg nil)
    (card_remove formula-decl nil finite_sets nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (incoming_edges const-decl "finite_set[edgetype[T]]" digraph_deg
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (G!1 skolem-const-decl "digraph[T]" trees nil)
    (v!1 skolem-const-decl "T" trees nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (finite_subset formula-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (card_subset formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tree_size_pos formula-decl nil trees nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil trees nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" digraph_def nil))
   nil)
  (tree_in_deg_max-1 nil 3805648068
   ("" (skeep)
    (("" (name n "size(G)")
      (("" (generalize v v)
        (("" (generalize G G)
          (("" (generalize n n)
            (("" (induct n)
              (("1" (skeep)
                (("1" (lemma tree_size_pos)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (skeep)
                (("2" (skeep)
                  (("2" (expand tree? -3)
                    (("2" (split -3)
                      (("1" (flatten)
                        (("1" (expand in_deg)
                          (("1" (expand incoming_edges)
                            (("1" (lemma card_subset[edgetype])
                              (("1"
                                (inst
                                 -1
                                 "{e: edgetype[T] | edges(G!1)(e) AND e`2 = v!1}"
                                 "edges(G!1)")
                                (("1"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (expand subset?)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (expand member)
                                        (("2" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma finite_subset[edgetype])
                                  (("2"
                                    (inst -1 "edges(G!1)" _)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (expand subset?)
                                          (("2"
                                            (expand member)
                                            (("2" (skeep) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst -3 "del_vert(G!1,v!2)" "v!1")
                          (("2" (split)
                            (("1" (expand in_deg)
                              (("1"
                                (expand incoming_edges)
                                (("1"
                                  (expand del_vert)
                                  (("1"
                                    (lemma card_subset[edgetype])
                                    (("1"
                                      (inst
                                       -1
                                       "{e: edgetype[T] | edges(G!1)(e) AND e`2 = v!1}"
                                       "{e: edgetype[T] |
              (edges(G!1)(e) AND NOT in?(v!2, e)) AND e`2 = v!1}")
                                      (("1"
                                        (split)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand subset?)
                                          (("2"
                                            (expand member)
                                            (("2"
                                              (expand in?)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split -3)
                                                    (("1"
                                                      (lemma
                                                       tree_no_self_loops)
                                                      (("1"
                                                        (inst -1 "G!1")
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma finite_subset[edgetype])
                                        (("2"
                                          (inst -1 "edges(G!1)" _)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand subset?)
                                                (("2"
                                                  (expand member)
                                                  (("2"
                                                    (skeep)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma finite_subset[edgetype])
                                        (("3"
                                          (inst -1 "edges(G!1)" _)
                                          (("3"
                                            (inst?)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand subset?)
                                                (("3"
                                                  (expand member)
                                                  (("3"
                                                    (skeep)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand size)
                              (("2"
                                (expand del_vert)
                                (("2"
                                  (lemma card_remove[T])
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (expand leaf?)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (lemma in_deg_pos)
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

